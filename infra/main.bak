targetScope = 'subscription'

@minLength(2)
@maxLength(4)
@description('2-4 chars to prefix the Azure resources, NOTE: no number or symbols')
param prefix string = 'rsh'

var uniqueSubString = uniqueString(guid(subscription().subscriptionId))
var uString = '${prefix}${uniqueSubString}'

var keyVaultName = '${substring(uString, 0, 6)}akv00'
var resourceGroupName = '${substring(uString, 0, 6)}-rg'
var nsgName = '${substring(uString, 0, 6)}nsg'
var firewallName = '${substring(uString, 0, 6)}HubFW'
var firewallPublicIpName = '${substring(uString, 0, 6)}FWPIp'
var fwRoutingTable = '${substring(uString, 0, 6)}AdbRoutingTbl'
var eHNameSpace = '${substring(uString, 0, 6)}eh'
var managedIdentityName = '${substring(uString, 0, 6)}Identity'

@description('Default location of the resources')
param location string = 'southeastasia'
@description('')
param hubVnetName string = 'hubvnet'
@description('')
param HubVnetCidr string = '10.0.0.0/16'
@description('')
param FirewallSubnetCidr string = '10.0.1.0/26'

@description('Southeastasia ADB webapp address')
param webappDestinationAddresses array = [
  '52.187.145.107/32'
  '52.187.0.85/32'
]
@description('Southeastasia ADB log blob')
param logBlobstorageDomains array = [
  'dblogprodseasia.blob.${environment().suffixes.storage}'
]
@description('Southeastasia ADB extended ip')
param extendedInfraIp array = [
  '20.195.104.64/28'
]
@description('Southeastasia SCC relay Domain')
param sccReplayDomain array = [
  'tunnel.southeastasia.azuredatabricks.net'
]
@description('Southeastasia SDB metastore')
param metastoreDomains array = [
  'consolidated-southeastasia-prod-metastore.mysql.database.azure.com'
]
@description('Southeastasia EventHub endpoint')
param eventHubEndpointDomain array = [
  'prod-southeastasia-observabilityeventhubs.servicebus.windows.net'
]
@description('Southeastasia Artifacts Blob')
param artifactBlobStoragePrimaryDomains array = [
  'dbartifactsprodseap.blob.${environment().suffixes.storage}'
  'arprodseapa1.blob.${environment().suffixes.storage}'
  'arprodseapa2.blob.${environment().suffixes.storage}'
  'arprodseapa3.blob.${environment().suffixes.storage}'
  'dbartifactsprodeap.blob.${environment().suffixes.storage}'
]

resource rg 'Microsoft.Resources/resourceGroups@2021-04-01' = {
  name: resourceGroupName
  location: location
}

module myIdentity './other/managedIdentity.template.bicep' = {
  scope: rg
  name: 'ManagedIdentity'
  params: {
    managedIdentityName: managedIdentityName
    location: location
  }
}

module nsg './network/securitygroup.template.bicep' = {
  scope: rg
  name: 'NetworkSecurityGroup'
  #disable-next-line explicit-values-for-loc-params  
  params: {
    securityGroupName: nsgName
  }
}

module routeTable './network/routetable.template.bicep' = {
  scope: rg
  name: 'RouteTable'
  #disable-next-line explicit-values-for-loc-params  
  params: {
    routeTableName: fwRoutingTable
  }
}

module vnets './network/vnet.hub.template.bicep' = {
  scope: rg
  name: 'HubandSpokeVnets'
  #disable-next-line explicit-values-for-loc-params  
  params: {
    hubVnetName: hubVnetName
    firewallSubnetCidr: FirewallSubnetCidr
    hubVnetCidr: HubVnetCidr
  }
}

module hubFirewall './network/firewall.template.bicep' = {
  scope: rg
  name: 'HubFirewall'
#disable-next-line explicit-values-for-loc-params
  params: {
    firewallName: firewallName
    publicIpAddressName: firewallPublicIpName
    vnetName: vnets.outputs.hubVnetName
    webappDestinationAddresses: webappDestinationAddresses
    logBlobstorageDomains: logBlobstorageDomains
    infrastructureDestinationAddresses: extendedInfraIp
    sccRelayDomains: sccReplayDomain
    metastoreDomains: metastoreDomains
    eventHubEndpointDomains: eventHubEndpointDomain
    artifactBlobStoragePrimaryDomains: artifactBlobStoragePrimaryDomains
    dbfsBlobStrageDomain: array('${adb.outputs.databricks_dbfs_storage_accountName}.blob.${environment().suffixes.storage}')
  }
}

module routeTableUpdate './network/routetableFirewallRoute.template.bicep' = {
  scope: rg
  name: 'RouteTableUpdate'
  params: {
    routeTableName: fwRoutingTable
    firewallPrivateIp: hubFirewall.outputs.firewallPrivateIp
  }
}

module keyVault './keyvault/keyvault.template.bicep' = {
  scope: rg
  name: 'KeyVault'
#disable-next-line explicit-values-for-loc-params
  params: {
    keyVaultName: keyVaultName
    objectId: myIdentity.outputs.mIdentityClientId
  }
}

#disable-next-line explicit-values-for-loc-params
module loganalytics './monitor/loganalytics.template.bicep' = {
  scope: rg
  name: 'LogAnalytics'
}

module eventHubLogging './monitor/eventhub.template.bicep' = {
  scope: rg
  name: 'EventHub'
#disable-next-line explicit-values-for-loc-params
  params: {
    namespaceName: eHNameSpace
  }
}

// output resourceGroupName string = rg.name
// output keyVaultName string = keyVaultName
// output adbWorkspaceName string = adbWorkspaceName
// output storageAccountName string = storageAccountName
// output storageKey1 string = adlsGen2.outputs.key1
// output storageKey2 string = adlsGen2.outputs.key2
// output databricksWksp string = adb.outputs.databricks_workspace_id
// output databricks_workspaceUrl string = adb.outputs.databricks_workspaceUrl
// output keyvault_id string = keyVault.outputs.keyvault_id
// output keyvault_uri string = keyVault.outputs.keyvault_uri
// output logAnalyticsWkspId string = loganalytics.outputs.logAnalyticsWkspId
// output logAnalyticsprimarySharedKey string = loganalytics.outputs.primarySharedKey
// output logAnalyticssecondarySharedKey string = loganalytics.outputs.secondarySharedKey
// output eHNamespaceId string = eventHubLogging.outputs.eHNamespaceId
// output eHubNameId string = eventHubLogging.outputs.eHubNameId
// output eHAuthRulesId string = eventHubLogging.outputs.eHAuthRulesId
// output eHPConnString string = eventHubLogging.outputs.eHPConnString
// output dsOutputs object = createDatabricksCluster.outputs.patOutput
// output adbCluster object = createDatabricksCluster.outputs.adbCluster
// output amlProperties object = aml.outputs.amlProperties
